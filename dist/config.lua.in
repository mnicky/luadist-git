-- Luadist configuration

module ("dist.config", package.seeall)

-- Look for _PROGDIR by default --------------------------------------
local path    = _PROGDIR
if path then path = path:gsub("\\", "/") .. "/.." end

-- System information ------------------------------------------------
version       = "@DIST_VERSION@"   -- Current LuaDist version
arch          = "@DIST_ARCH@"      -- Host architecture
type          = "@DIST_TYPE@"      -- Host type

-- Directories -------------------------------------------------------
root_dir      = path or os.getenv("DIST_ROOT") or "/"
temp_dir      = "tmp"
cache_dir     = temp_dir .. "/cache"
distinfos_dir = "share/luadist-git/dists"
test_dir      = "share/luadist-git/test"

-- Files -------------------------------------------------------------
manifest_file = cache_dir .. "/.gitmodules"
log_file      = temp_dir .. "/luadist.log"

-- Repositories ------------------------------------------------------
repos = {
    "https://github.com/LuaDist/Repository.git",
}

-- Settings ----------------------------------------------------------
debug         = false         -- Use debug mode.
verbose       = false         -- Print verbose output.
simulate      = false         -- Only simulate installation of packages.
test          = false         -- Run CTest before install

cache         = true          -- Use cache.
cache_timeout = 60 * 60       -- Cache timeout in seconds.

-- Components (of modules) that will be installed.
components    = {
  "Runtime", "Library", "Header", "Data", "Documentation", "Example", "Other"
}

-- Available log levels are: DEBUG, INFO, WARN, ERROR, FATAL (see dist.logger for more information).
print_log_level = "WARN"      -- Minimum level for log messages to be printed (nil to disable).
write_log_level = "INFO"      -- Minimum level for log messages to be logged (nil to disable).


-- CMake variables ---------------------------------------------------
variables = {
  --- Install defaults
  INSTALL_BIN                        = "@INSTALL_BIN@",
  INSTALL_LIB                        = "@INSTALL_LIB@",
  INSTALL_INC                        = "@INSTALL_INC@",
  INSTALL_ETC                        = "@INSTALL_ETC@",
  INSTALL_LMOD                       = "@INSTALL_LMOD@",
  INSTALL_CMOD                       = "@INSTALL_CMOD@",

  --- LuaDist specific variables
  DIST_VERSION                       = version,
  DIST_ARCH                          = arch,
  DIST_TYPE                          = type,

  -- CMake specific setup
  CMAKE_GENERATOR                    = "@CMAKE_GENERATOR@",
  CMAKE_BUILD_TYPE                   = "@CMAKE_BUILD_TYPE@",

  -- RPath functionality
  CMAKE_SKIP_BUILD_RPATH             = "@CMAKE_SKIP_BUILD_RPATH@",
  CMAKE_BUILD_WITH_INSTALL_RPATH     = "@CMAKE_BUILD_WITH_INSTALL_RPATH@",
  CMAKE_INSTALL_RPATH                = "@CMAKE_INSTALL_RPATH@",
  CMAKE_INSTALL_RPATH_USE_LINK_PATH  = "@CMAKE_INSTALL_RPATH_USE_LINK_PATH@",
  CMAKE_INSTALL_NAME_DIR             = "@CMAKE_INSTALL_NAME_DIR@",

  -- OSX specific
  CMAKE_OSX_ARCHITECTURES            = "@CMAKE_OSX_ARCHITECTURES@",
}

-- Building ----------------------------------------------------------
cmake         = "cmake"
ctest         = "ctest"

cache_command = cmake .. " -C cache.cmake"
build_command = cmake .. " --build . --clean-first"
install_component_command = cmake .. " -DCOMPONENT=#COMPONENT# -P cmake_install.cmake"
test_command = ctest .. " -V ."

cache_debug_options = "-DCMAKE_VERBOSE_MAKEFILE=true -DCMAKE_BUILD_TYPE=Debug"
build_debug_options = ""

-- Add -j option to make in case of unix makefiles to speed up builds
if (variables.CMAKE_GENERATOR == "Unix Makefiles") then
        build_command = build_command .. " -- -j6"
end

-- Add -j option to make in case of MinGW makefiles to speed up builds
if (variables.CMAKE_GENERATOR == "MinGW Makefiles") then
        build_command = "set SHELL=cmd.exe && " .. build_command .. " -- -j"
end
